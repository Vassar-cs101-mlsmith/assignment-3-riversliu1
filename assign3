;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname assign3) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
; CMPU-101 
; Fall 2018
; Assign 3
; Rivers Liu
;
; Description: Uses a list of bouncing balls to animate many balls
; of different sizes and colors, all moving in the same scene at 
; different speeds.

(require 2htdp/image) 
(require 2htdp/universe)

(define RADIUS 25)

; Scene dimensions
(define WIDTH 500)
(define HEIGHT 300)

; Create the background scene image
(define BACKGROUND
  (place-image (rectangle WIDTH HEIGHT "solid" "lightgray")
               (/ WIDTH 2) (/ HEIGHT 2)
               (empty-scene WIDTH HEIGHT)))

; Data Definitions 
(define-struct ball (im x y dx dy))
; A ball is a (make-ball im p dx dy) where
; im is an image (of the ball), 
; x and y are numbers representing the ball's position, and
; dx and dy are numbers representing the ball's horizontal and 
;   vertical velocity

; Data Definition for a list-of-balls:
; A list-of-balls is either:
; 1. '(), or
; 2. (cons b lob), where b is a ball
;    and lob is a list-of-balls

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Define four (4) example ball CONSTANTS:
;   one touching each edge of the scene (top, bottom, left, right)
;   These will help you test bounce conditions.

; here's one of my ball CONSTANTS, which you may use or modify
; if you like to define the rest.
(define BALL-AT-LEFT 
  (make-ball (circle (+ RADIUS 4) "solid" "MistyRose")
             (+ 2 (+ RADIUS 4)) (/ HEIGHT 2) 4 4))

(define BALL-AT-RIGHT
  (make-ball (circle (- RADIUS 2) "solid" "Thistle") 
             (- WIDTH (- RADIUS 2) 2) (/ HEIGHT 2) -8 8))

(define BALL-AT-TOP
  (make-ball (circle (+ RADIUS 17) "solid" "PowderBlue")
             (/ WIDTH 2) (+ RADIUS 19) -2 2))

(define BALL-AT-BOTTOM
  (make-ball (circle (- RADIUS 10) "solid" "Tan")
             (/ WIDTH 2) (- HEIGHT (- RADIUS 9)) -5 -5)) 


; Define INIT-LOB to be a list-of-balls:
; You will use this to be the initial state of the world.
; I've defined it to be the empty list, but you should define it
; to contain the four example ball CONSTANTS you just defined. 
;(define INIT-LOB '(make-ball)) 

(define INIT-LOB (list BALL-AT-RIGHT BALL-AT-LEFT BALL-AT-BOTTOM BALL-AT-TOP))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Templates for a ball and a list-of-balls.
; Use these to help you get started with the functions below.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
; ball -> 
; Template for a function that consumes a ball
(define (fun-for-ball b) 
  (...(ball-im b)...
   ...(ball-x b)...(ball-y b)...
   ...(ball-dx b)...(ball-dy b)...))

;(check-expect (fun-for-ball 

; list-of-balls -> 
; Template for a function that consumes a list-of-balls
(define (fun-for-lob lob) 
  (cond
    [(empty? lob)...] 
    [else (...(fun-for-ball (first lob))...
              ...(fun-for-lob (rest lob))...)])) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Design the functions below, in order. I've supplied the
; signature, purpose statement, and header for each function.
;
; You provide the check-expect examples, and using the appropriate
; template, complete the function bodies.
;
; I recommend you proceed in order, and complete each function,
; with passing tests, before going on to the next.
;
; The reason for completing the functions in the order they appear
; is earlier functions can be used as helper functions for the
; later functions.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; ball -> number
; computes the radius of given ball
(define (ball-radius b)
  (/ (image-width (ball-im b)) 2))
(check-expect (ball-radius BALL-AT-LEFT) 29)
(check-expect (ball-radius BALL-AT-RIGHT) 23)
(check-expect (ball-radius BALL-AT-TOP) 42) 
(check-expect (ball-radius BALL-AT-BOTTOM) 15) 

; ball -> boolean
; determines whether the ball reached the top edge of scene
(define (top-edge? b)
  (cond
    [(<= (ball-y b) (ball-radius b)) #true]
    [else #false]))
(check-expect (top-edge? (make-ball (circle (+ RADIUS 4) "solid" "MistyRose")
                                    4 29 -4 4)) #true)
(check-expect (top-edge? (make-ball (circle RADIUS "solid" "blue")
                                    14 34 -6 6)) #false)
 
; ball -> boolean 
; determines whether the ball reached the bottom edge of scene
(define (bottom-edge? b)
  (cond
    [(>= (ball-y b) (- HEIGHT (ball-radius b))) #true]  
    [else #false])) 
(check-expect (bottom-edge? (make-ball (circle (+ RADIUS 17) "solid" "Coral")
                                       4 258 -5 5)) #true)
(check-expect (bottom-edge? (make-ball (circle (- RADIUS 5) "solid" "SeaShell")
                                       20 15 -5 5)) #false)

; ball -> boolean
; determines whether the ball reached the left edge of scene
(define (left-edge? b)
  (cond
    [(<= (ball-x b) (ball-radius b)) #true]
    [else #false]))
(check-expect (left-edge? (make-ball (circle (- RADIUS 10) "solid" "Yellow")
                                     15 48 -10 10)) #true)
(check-expect (left-edge? (make-ball (circle RADIUS "solid" "PowderBlue")
                                     89 66 -5 5)) #false)

; ball -> boolean
; determines whether the ball reached the right edge of scene
(define (right-edge? b)
  (cond
    [(>= (ball-x b) (- WIDTH (ball-radius b))) #true]
    [else #false])) 
(check-expect (right-edge? (make-ball (circle (- RADIUS 5) "solid" "green")
                                      (- WIDTH 20) 200 -5 5)) #true)
(check-expect (right-edge? (make-ball (circle (+ RADIUS 5) "solid" "brown")
                                      45 45 -7 7)) #false)

; ball -> ball
; reverse ball's up-down direction if it hit top or bottom edge  
(define (reverse-up-down b)
  (cond
    [(or (top-edge? b) (bottom-edge? b)) (make-ball (ball-im b) (ball-x b) (ball-y b) (ball-dx b) (- (ball-dy b)))]
    [else b]))
(check-expect (reverse-up-down (make-ball (circle RADIUS "solid" "green")
                                          5 RADIUS -5 -5)) (make-ball (circle RADIUS "solid" "green") 5 RADIUS -5 5))
(check-expect (reverse-up-down (make-ball (circle RADIUS "solid" "green")
                                          5 (- HEIGHT RADIUS) 3 15)) (make-ball (circle RADIUS "solid" "green") 5 (- HEIGHT RADIUS) 3 -15))
(check-expect (reverse-up-down (make-ball (circle RADIUS "solid" "green")
                                          50 50 -10 10)) (make-ball (circle RADIUS "solid" "green") 50 50 -10 10))
; ball -> ball
; reverse ball's left-right direction if it hit left or right edge
(define (reverse-left-right b)
  (cond
    [(or (left-edge? b) (right-edge? b)) (make-ball (ball-im b) (ball-x b) (ball-y b) (- (ball-dx b)) (ball-dy b))]
    [else b]))
(check-expect (reverse-left-right (make-ball (circle RADIUS "solid" "blue")
                                                   RADIUS 100 -10 5)) (make-ball (circle RADIUS "solid" "blue") RADIUS 100 10 5))
(check-expect (reverse-left-right (make-ball (circle RADIUS "solid" "blue")
                                             (- WIDTH RADIUS) 100 7 5)) (make-ball (circle RADIUS "solid" "blue") (- WIDTH RADIUS) 100 -7 5))
(check-expect (reverse-left-right (make-ball (circle RADIUS "solid" "blue")
                                             30 30 10 19)) (make-ball (circle RADIUS "solid" "blue") 30 30 10 19))

; ball -> ball
; changes direction of given ball if it hit the top or bottom edge
(define (bounce-up-down b)...) 

; ball -> ball
; changes direction of given ball if it hit the left or right edge
(define (bounce-left-right b) ...)

; ball -> ball
; moves the given ball by its dx and dy amounts
(define (move-ball b)
  (make-ball (ball-im b) (+ (ball-dx b) (ball-x b)) (+ (ball-dy b) (ball-y b)) (ball-dx b) (ball-dy b)))
(check-expect (move-ball (make-ball (circle RADIUS "solid" "pink")
                                    10 10 -4 5)) (make-ball (circle RADIUS "solid" "pink") 6 15 -4 5))

; list-of-balls -> list-of-balls
; moves (and possibly bounces) each ball in given list
(define (move-list-of-balls lob) 
  (cond
    [(empty? lob) '()] 
    [(cons? lob) (cons (move-ball (reverse-up-down (reverse-left-right (first lob)))) (move-list-of-balls (rest lob)))])) 
                 

; ball image -> image
; renders given ball b on given background bg
(define (render-ball b bg)
  (place-image (ball-im b) (ball-x b) (ball-y b) bg))
  
; list-of-balls -> image 
; produces image of each ball at each given current position on
; background.
; (Yes, I provided this function for you! You shouldn't have to
;  touch it if you've correctly implemented the functions above.)
(define (render-balls lob) 
  (cond [(empty? lob) BACKGROUND]
        [else (render-ball (first lob)
                           (render-balls (rest lob)))]))

; Here's the main function with the big-bang expression!
; Once you've implemented move-list-of-balls, uncomment on-tick below.
(define (main w)
  (big-bang w
    (on-tick move-list-of-balls 1/28) 
    (to-draw render-balls)))

; Run program automatically, or type this in Interactions Pane:
; Use INIT-LOB as the initial state of the world...
(main INIT-LOB)